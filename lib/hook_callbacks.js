// Generated by CoffeeScript 1.3.3
var announceCurate, antispam, beggar, chatUniversals, handleNewSong, handleUserJoin, handleUserLeave, handleVote, updateDjs, updateVotes;

updateVotes = function(obj) {
  data.currentwoots = obj.positive;
  data.currentmehs = obj.negative;
  return data.currentcurates = obj.curates;
};

announceCurate = function(obj) {
  return API.sendChat("/em: " + obj.user.username + " loves this song!");
};

updateDjs = function(obj) {
  return data.djs = API.getDJs();
};

handleUserJoin = function(user) {
  data.host = API.getHost();
  data.mods = API.getModerators();
  data.userJoin(user);
  data.users[user.id].updateActivity();
  return API.sendChat("/em: " + user.username + " has joined the Room!");
};

handleNewSong = function(obj) {
  var songId;
  data.intervalMessages();
  if (data.currentsong === null) {
    data.newSong();
  } else {
    "/em: Just played " + data.currentsong.title + " by " + data.currentsong.author + ". Stats: Woots: " + data.currentwoots + ", Mehs: " + data.currentmehs + ", Loves: " + data.currentcurates + ".";
    data.newSong();
    document.getElementById("button-vote-positive").click();
  }
  if (data.forceSkip) {
    songId = obj.media.id;
    return setTimeout(function() {
      var cMedia;
      cMedia = API.getMedia();
      if (cMedia.id === songId) {
        return API.moderateForceSkip();
      }
    }, obj.media.duration * 1000);
  }
};

handleVote = function(obj) {
  data.users[obj.user.id].updateActivity();
  return data.users[obj.user.id].updateVote(obj.vote);
};

handleUserLeave = function(user) {
  var disconnectStats, i, u, _i, _len, _ref;
  data.host = API.getHost();
  data.mods = API.getModerators();
  disconnectStats = {
    id: user.id,
    time: new Date(),
    songCount: data.songCount
  };
  i = 0;
  _ref = data.internalWaitlist;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    u = _ref[_i];
    if (u.id === user.id) {
      disconnectStats['waitlistPosition'] = i - 1;
      data.setInternalWaitlist();
      break;
    } else {
      i++;
    }
  }
  data.userDisconnectLog.push(disconnectStats);
  return data.users[user.id].inRoom(false);
};

antispam = function(chat) {
  var plugRoomLinkPatt, sender;
  plugRoomLinkPatt = /(\bhttps?:\/\/(www.)?plug\.dj[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
  if (plugRoomLinkPatt.exec(chat.message)) {
    sender = API.getUser(chat.fromID);
    if (!sender.ambassador && !sender.moderator && !sender.owner && !sender.superuser) {
      if (!data.users[chat.fromID]["protected"]) {
        API.sendChat("Don't spam room links you ass clown");
        return API.moderateDeleteChat(chat.chatID);
      } else {
        return API.sendChat("I'm supposed to kick you, but you're just too darn pretty.");
      }
    }
  }
};

beggar = function(chat) {
  var msg, r, responses;
  msg = chat.message.toLowerCase();
  responses = ["Good idea @{beggar}!  Don't earn your fans or anything thats so yesterday", "Guys @{beggar} asked us to fan him!  Lets all totally do it! ಠ_ಠ", "srsly @{beggar}? ಠ_ಠ", "@{beggar}.  Earning his fans the good old fashioned way.  Hard work and elbow grease.  A true american."];
  r = Math.floor(Math.random() * responses.length);
  if (msg.indexOf('fan me') !== -1 || msg.indexOf('fan for fan') !== -1 || msg.indexOf('fan pls') !== -1 || msg.indexOf('fan4fan') !== -1 || msg.indexOf('add me to fan') !== -1) {
    return API.sendChat(responses[r].replace("{beggar}", chat.from));
  }
};

chatUniversals = function(chat) {
  data.activity(chat);
  antispam(chat);
  return beggar(chat);
};
